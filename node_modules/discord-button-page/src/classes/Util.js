const { MessageEmbed } = require('discord.js');
const { MessageButton, MessageActionRow } = require('discord-buttons');

class Util {

  /**
   * discord-button-page Util
   * @hideconstructor
   */
  constructor() {
    throw new Error(`The ${this.constructor.name} class may not be instantiated!`);
  }

  /**
   * Author Page
   * @param {string} message.
   * @param {string} row.
   * @param {string} embed option.
   * @param {string} option channel.
   * @param {number} time duration.
   * @param {boolean} count page true/false.
   * @param {boolean} current Page = 0.
   * @param {string} emoji of previous.
   * @param {string} emoji of stop.
   * @param {string} emoji of next.
   * @param {string} color of previous.
   * @param {string} color of stop.
   * @param {string} color of next.
   * @returns {string}
   */
  static authorPage([message, row], [embed, channel, duration, countPage, currentPage], [emojiPrevious, emojiStop, emojiNext], [colorPrevious, colorStop, colorNext]) {
    this.currentPage
    return message.author.send({ embed: embed[0], components: row }).then(msg => {
      this.msg = msg;
      
      const filter = (buttons) => buttons.clicker.id === message.author.id;
      const collector = msg.createButtonCollector(filter, { time: duration });

      collector.on("collect", (button) => {
        button.reply.defer();
        if (button.id === "previous") {
          if (!this.msg) throw new Error("EMBED: Can't back embed before!");
          currentPage--;
          const embed1 = embed[currentPage];
          if (countPage) embed1.setFooter(`Page: ${currentPage + 1}/${embed.length}`).setTimestamp(Date.now());

          if (currentPage <= 0) {
            let buttonPrevious1 = new MessageButton().setID("previous").setStyle(colorPrevious).setEmoji(emojiPrevious).setDisabled();
            let buttonStop1 = new MessageButton().setID("stop").setStyle(colorStop).setEmoji(emojiStop);
            let buttonNext1 = new MessageButton().setID("next").setStyle(colorNext).setEmoji(emojiNext);

            let row = new MessageActionRow().addComponents(buttonPrevious1, buttonStop1, buttonNext1);
            this.msg.edit(embed1, { components: [row] });
          }else if (currentPage <= embed.length) {
            let buttonPrevious1 = new MessageButton().setID("previous").setStyle(colorPrevious).setEmoji(emojiPrevious);
            let buttonStop1 = new MessageButton().setID("stop").setStyle(colorStop).setEmoji(emojiStop);
            let buttonNext1 = new MessageButton().setID("next").setStyle(colorNext).setEmoji(emojiNext);

            let row = new MessageActionRow().addComponents(buttonPrevious1, buttonStop1, buttonNext1);
            this.msg.edit(embed1, { components: [row] });
          }
        }
        else if (button.id === "stop") {
          if (!this.msg) throw new Error("EMBED: Can't stop embed!");
          let embed1 = new MessageEmbed().setColor("RED").setDescription('The page has been stoped!').setTimestamp(Date.now());
          this.msg.delete().catch(() => null);
          if (channel === message.author) {
            channel.send(embed1);
          } else {
            message.channel.send(embed1);
          }
        }
        else if (button.id === "next") {
          if (!this.msg) throw new Error("EMBED: Can't next the page!");
          currentPage++;
          const embed1 = embed[currentPage];
          if (countPage) embed1.setFooter(`Page: ${currentPage + 1}/${embed.length}`).setTimestamp(Date.now());
          if (currentPage >= embed.length - 1) {
            let buttonPrevious1 = new MessageButton().setID("previous").setStyle(colorPrevious).setEmoji(emojiPrevious);
            let buttonStop1 = new MessageButton().setID("stop").setStyle(colorStop).setEmoji(emojiStop);
            let buttonNext1 = new MessageButton().setID("next").setStyle(colorNext).setEmoji(emojiNext).setDisabled();

            let row = new MessageActionRow().addComponents(buttonPrevious1, buttonStop1, buttonNext1);
            this.msg.edit(embed1, { components: [row] });
          } else if (currentPage > 0) {
            let buttonPrevious1 = new MessageButton().setID("previous").setStyle(colorPrevious).setEmoji(emojiPrevious);
            let buttonStop1 = new MessageButton().setID("stop").setStyle(colorStop).setEmoji(emojiStop);
            let buttonNext1 = new MessageButton().setID("next").setStyle(colorNext).setEmoji(emojiNext);

            let row = new MessageActionRow().addComponents(buttonPrevious1, buttonStop1, buttonNext1);
            this.msg.edit(embed1, { components: [row] });
          }
        }
      });

      collector.on("end", () => {
        let buttonPrevious1 = new MessageButton().setID("previous").setStyle(colorPrevious).setEmoji(emojiPrevious).setDisabled();
        let buttonStop1 = new MessageButton().setID("stop").setStyle(colorStop).setEmoji(emojiStop).setDisabled();
        let buttonNext1 = new MessageButton().setID("next").setStyle(colorNext).setEmoji(emojiNext).setDisabled();

        let row1 = new MessageActionRow().addComponents(buttonPrevious1, buttonStop1, buttonNext1);
        const embed1 = embed[currentPage];
        this.msg.edit(embed1, { components: [row1] }).catch(() => null);
      });
      
    });

  }
}

module.exports = Util;